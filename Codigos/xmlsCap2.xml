<function name="foo" type="int" line="3">
	<params>
		<param type="int" name="a"/>
		<param type="int" name="b"/>
		...
	</params>
	<body>
		...
	</body>
</function>

<return line="5">
	<binaryOperator type="arithmetic" operator="+">
		<variable name="y"/>
		<variable name="x"/>
	</binaryOperator>

<declarations>
	<declaration type="int" name="w" line="2"/>
	<declaration type="int" name="q" line="2"/>
	<declaration type="int" name="l" line="2"/>
</declarations>
<declarations>
	<declaration type="int" name="j" line="3">
		<const value="0"/>
	</declaration>
</declarations>

<if line="36">
	<binaryOperator type="comparison" operator="&gt">
		<variable name="y"/>
		<const value="0"/>
	</binaryOperator>
	<then>
		<body>
			...
		</body>
	</then>
	<else>
		<body>
			...
		</body>
	</else>
</if>

<while line="17">
	<binaryOperator type="comparision" operator="&gt">
		<variable name="w"/>
		<const value="0"/>
	</binaryOperator>
	<body>
		...
	</body>
</while>

<for line="54">
	<declarations>
		<declaration type="int" name="i" line="54">
			<const value="0"/>
		</declaration>
	</declarations>
	<binaryOperator type="comparision" operator="&lt">
		<variable name="i"/>
		<variable name="x"/>
	</binaryOperator>
	<assigment name="i" line="54">
		<binaryOperator type="arithmetic" operator="+">
			<variable name="i"/>
			<const value="1"/>
		</binaryOperator>
	</assigment>
	<body>
		...
	</body>
</for>

<assigment name="a" line="63">
	<binaryOperator type="arithmetic" operator="+">
		<variable name="b"/>
		<variable name="c"/>
	</binaryOperator>
</assigment>

<assigmentOperator name="a" type="arithmetic" operator="*" line="48">
	<variable name="b"/>
</assigmentOperator>

<assigment name="w" line="14">
	<variable name="y"/>
</assigment>

<assigment name="r" line="43">
	<const value="1"/>
</assigment>

<string value="Hola mundo"/>

<assigment name="a" line="68">
	<callFunction name="foo" type="int">
		<arg>
			<variable name="b"/>
		</arg>
	</callFunction>
</assigment>

/ast2xml "inputCPP_file" -- "outputXML_file"

$ cat test.cc
int f(int x) {
  int result = (x / 42);
  return result;
}

# Clang by default is a frontend for many tools; -Xclang is used to pass
# options directly to the C++ frontend.
$ clang -Xclang -ast-dump -fsyntax-only test.cc
TranslationUnitDecl 0x5aea0d0 <<invalid sloc>>
... cutting out internal declarations of clang ...
`-FunctionDecl 0x5aeab50 <test.cc:1:1, line:4:1> f 'int (int)'
  |-ParmVarDecl 0x5aeaa90 <line:1:7, col:11> x 'int'
  `-CompoundStmt 0x5aead88 <col:14, line:4:1>
    |-DeclStmt 0x5aead10 <line:2:3, col:24>
    | `-VarDecl 0x5aeac10 <col:3, col:23> result 'int'
    |   `-ParenExpr 0x5aeacf0 <col:16, col:23> 'int'
    |     `-BinaryOperator 0x5aeacc8 <col:17, col:21> 'int' '/'
    |       |-ImplicitCastExpr 0x5aeacb0 <col:17> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0x5aeac68 <col:17> 'int' lvalue ParmVar 0x5aeaa90 'x' 'int'
    |       `-IntegerLiteral 0x5aeac90 <col:21> 'int' 42
    `-ReturnStmt 0x5aead68 <line:3:3, col:10>
      `-ImplicitCastExpr 0x5aead50 <col:10> 'int' <LValueToRValue>
        `-DeclRefExpr 0x5aead28 <col:10> 'int' lvalue Var 0x5aeac10 'result' 'int'